Metodi e interfacce
Questa lezione copre metodi e interfacce, i costrutti che definiscono oggetti e il loro comportamento.

Gli Autori di Go
http://golang.org

* Metodi

Go non ha classi. Ad ogni modo, puoi definire metodi sui tipi struttura.

Il _ricettore_del_metodo_ appare nella propria lista di argomenti tra la parola chiave `func` e il nome del metodo.

.play methods/methods.go

* Metodi continua

Puoi dichiarare un metodo su _qualsiasi_ tipo che è dichiarato nel tuo _package_, non solo tipi struct.

Ad ogni modo, non puoi definire un metodo su un tipo da un altro _package_ (inclusi i tipi _built-in_).

.play methods/methods-continued.go

* Metodi con puntatori ricettori

I metodi possono essere associati a tipi oppure a puntatori a tipi.

Abbiamo appena visto due metodi `Abs`. Uno sul puntatore al tipo `*Vertex` e l'altro sul valore di tipo `MyFloat`.

Ci sono due ragioni per usare un puntatore ricettore. Primo, per evitare di copiare il valore ad ogni chiamata al metodo (più efficiente se il tipo valore è una struct molto grande). Secondo, per fare in modo che il metodo modifichi il valore al quale il ricettore sta puntando.

Prova a cambiare la dichiarazione dei metodi `Abs` e `Scale` in modo da usare `Vertex` come ricettore, invece di `*Vertex`.

Il metodo `Scale` non ha effetto quando `v` è un `Vertex`. `Scale` muta `v`. Quando `v` è un tipo valore (non puntatore), il metodo vede la copia di `Vertex` e non può mutare il valore originale.

`Abs` funziona alla stessa maniera. Riesce solo a leggere `v`. Non importa se sta leggendo il valore originale (attraverso un puntatore) o una copia di quel valore.

.play methods/methods-with-pointer-receivers.go

* Interfacce

Un tipo interfaccia è definito da un insieme di metodi.

Un valore di tipo interfaccia può contenere qualsiasi valore che implementa quei metodi.

*Nota:* C'è un errore nel codice di esempio nella linea 22.
`Vertex` (il tipo valore) non soddisfa `Abser` perchè
il metodo `Abs` è definito solo su `*Vertex` (il tipo puntatore).

.play methods/interfaces.go

* Interfacce sono soddisfatte implicitamente

Un tipo implementa un'interfaccia implementandone i metodi.

Non c'è una dichiarazione esplicita; no parole chiavi "implements"

Interfacce implicite scollegano i _packages_ dell'implementazione dai _packages_ che definiscono le interfacce: l'uno non dipende dall'altro.

Questo incoraggia anche la definizione precisa di interfacce, perchè si deve trovare ogni implementazione e taggarla con il nome della nuova interfaccia.

[[http://golang.org/pkg/io/][_package_ io]] definisce `Reader` e `Writer`; non devi ridefinirle.

.play methods/interfaces-are-satisfied-implicitly.go

* Stringer

Una delle interfacce più presenti è [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] definita nel _package_ [[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

Un `Stringer` è un tipo che può descrivere se stesso come una stringa. Il _package_ `fmt` (e molti altri) usano questa interfaccia per stampare valori.

.play methods/stringer.go

* Esercizio: Stringer

Fai in modo che il tipo `IPAddr` implementi `fmt.Stringer` per stampare l'indirizzo nel formato punto-decimale.

Per esempio, `IPAddr{1,`2,`3,`4}` dovrebbe stampare `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Errori

I programmi Go esprimono uno stato di errore con i valori `error`.

Il tipo `error` è un'interfaccia _built-in_ simile a `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Come per `fmt.Stringer`, il _package_ `fmt` usa l'interfaccia `error` per stampare i valori.)

Le funzioni spesso ritornano valori `error`, e il codice chiamante dovrebbe gestire gli errori testando se il valore di error è uguale a `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
	}
	fmt.Println("Converted integer:", i)

Un `error` nil denota successo; un `error` non-nil denota un fallimento.

.play methods/errors.go

* Esercizio: Errori

Copia la tua funzione `Sqrt` dagli [[/flowcontrol/8][esercizi precedenti]] e modificalo in modo che ritorni un valore `error`.

`Sqrt` dovrebbe ritornare un errore non-nil quando riceve un numero negativo, in quanto non supporta numeri complessi.

Crea un nuovo tipo

	type ErrNegativeSqrt float64

e trasformalo in `error` dandogli un metodo

	func (e ErrNegativeSqrt) Error() string

così che `ErrNegativeSqrt(-2).Error()` ritorni `"non puoi `Sqrt`un numero negativo:`-2"`.

*Nota:* una chiamata a `fmt.Sprint(e)` dentro il metodo `Error` manderà il programma in un ciclo infinito. Puoi evitarlo convertendo prima `e`: `fmt.Sprint(float64(e))`. Perchè?

Cambia la tua funzione `Sqrt` in modo da ritornare il valore `ErrNegativeSqrt` quando riceve un numero negativo.

.play methods/exercise-errors.go

* Reader

Il _package_ `io` specifica l'interfaccia `io.Reader`,
che rappresenta la lettura di uno _stream_ di dati.

La libreria standard di Go contiene [[http://golang.org/search?q=Read#Global][molte implementazioni]] di queste interfacce, includendo file, connessioni di rete, compressori, ciphers, e altre.

L'interfaccia `io.Reader` ha un metodo `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` popola il dato slice di bytes con dati e ritorna il numero di bytes popolati e un valore error. ritorna un errore `io.EOF` quando lo _stream_ termina.

Il codice di esempio crea uno
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
e allo stesso tempo consuma il suo output di 8 bytes.

.play methods/reader.go

* Esercizio: Reader

Implementa un tipo `Reader` che produce uno _stream_ infinito del carattere ASCII `'A'`.

.play methods/exercise-reader.go

* Esercizio: rot13Reader

Un pattern comune è [[http://golang.org/pkg/io/#Reader][io.Reader]] che incapsula un altro `io.Reader`, modificando lo _stream_ in alcuni modi.

Per esempio, la funzione [[http://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] prende un `io.Reader` (uno _stream_ di dati compressi) e ritorna un `*gzip.Reader`, che implementa anche lui `io.Reader` (uno _stream_ di dati non compressi).

Implementa un `rot13Reader` che implementa `io.Reader` e legge da un `io.Reader`, modificando lo _stream_ applicando la sostituzione cipher [[http://en.wikipedia.org/wiki/ROT13][rot13]] a tutti i caratteri alfabetici.

Il tipo `rot13Reader` è già fornito per te.
Trasformalo in un `io.Reader` implementandone il metodo `Read`.

.play methods/exercise-rot-reader.go

* Web server

Il [[http://golang.org/pkg/net/http/][_package_ http]] serve richieste HTTP usando qualsiasi valore che implementa `http.Handler`:

	package http

	type Handler interface {
		ServeHTTP(w ResponseWriter, r *Request)
	}

In questo esempio, il tipo `Hello` implementa `http.Handler`.

Visita [[http://localhost:4000/][http://localhost:4000/]] per vedere l'annuncio.

#appengine: *Nota:* Questo esempio non verrà eseguito se si sta usando l'interfaccia Web del tour.
#appengine: Per provare a scrivere un web server potresti voler
#appengine: [[http://golang.org/doc/install/][installare Go]].

.play methods/web-servers.go

* Esercizio: gestore HTTP

Implementa i seguenti tipi e definisci in loro il metodo ServeHTTP. Configurali in modo che possano gestire percorsi specifici nel tuo web server.

	type String string

	type Struct struct {
		Greeting string
		Punct    string
		Who      string
	}

Per esempio, dovresti essere in grado di configurare i gestori usando

	http.Handle("/string", String("I'm a frayed knot."))
	http.Handle("/struct", &Struct{"Hello", ":", "Gophers!"})

#appengine: *Nota:* Questo esempio non verrà eseguito se si sta usando l'interfaccia Web del tour.
#appengine: Per provare a scrivere un web server potresti voler
#appengine: [[http://golang.org/doc/install/][installare Go]].

.play methods/exercise-http-handlers.go

* Immagini

Il [[http://golang.org/pkg/image/#Image][_package_ image]] definisce l'interfaccia `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Nota*: il valore di ritorno `Rectangle` del metodo `Bounds` è in realtà un
[[http://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], in quanto la dichiarazione è dentro il _package_ `image`.

(Guarda [[http://golang.org/pkg/image/#Image][la documentazione]] per tutti i dettagli.)

I tipi `color.Color` e `color.Model` sono anche loro interfacce, ma lo ignoreremo per usare le implementazioni predefinite `color.RGBA` e `color.RGBAModel`. Queste interfacce e tipi sono specificati nel [[http://golang.org/pkg/image/color/][_package_ image/color]]

.play methods/images.go

* Esercizio: Immagini

Ricordi il generatore di immagine che hai scritto precedentemente? Scriviamone un altro, ma questa volta ritornerà un'implementazione di `image.Image` invece di una slice di dati.

Definisci il tuo tipo `Image`, implementa [[http://golang.org/pkg/image/#Image][i metodi necessari]], e chiama `pic.ShowImage`.

`Bounds` dovrebbe ritornare un `image.Rectangle`, come `image.Rect(0,`0,`w,`h)`.

`ColorModel` dovrebbe ritornare `color.RGBAModel`.

`At` dovrebbe ritornare un colore; il valore `v` nell'ultimo generatore di immagine corrisponde a `color.RGBA{v,`v,`255,`255}` in questo.

.play methods/exercise-images.go

* Congratulazioni

Hai terminato questa lezione!

Puoi tornare alla lista dei [[/list][moduli]] per scoprire cos'altro puoi imparare, o continua con la [[javascript:click('.next-page')][prossima lezione]].
