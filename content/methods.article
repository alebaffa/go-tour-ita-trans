Metodi e interfacce
Questa lezione copre metodi e interfacce, i costrutti che definiscono oggetti e il loro comportamento.

Gli Autori di Go
http://golang.org

* Metodi

Go non ha classi.
Ad ogni modo, puoi definire metodi sui tipi struttura.

Un metodo è una funzione con uno speciale argomento _ricettore_.

Il _ricettore_del_metodo_ appare nella propria lista di argomenti tra la parola chiave `func` e il nome del metodo.

In questo esempio, il metodo `Abs` ha un ricettore di tipo `Vertex` chiamato `v`.

.play methods/methods.go

* Metodi sono funzioni

Ricorda: un metodo è semplicemente una funzione con un argomento ricettore.

Qui trovate `Abs` scritto sottoforma di regolare funzione senza cambiamenti nella sua funzionalità.

.play methods/methods-funcs.go

* Metodi continua

Puoi dichiarare un metodo anche su tipi che non sono strutture.

In questo esempio vediamo un tipo numerico `MyFloat` con un metodo `Abs`.

Puoi dichiarare un metodo con un ricettore il cui tipo è dichiarato nello stesso
package del metodo.
Non puoi dichiarare un metodo con un ricettore il cui tipo è definito in un altro
package (il che include anche tipi nativi come `int`).

.play methods/methods-continued.go

* Ricettori puntatori

Puoi dichiarare metodi con ricettori puntatori.

Questo significa che il tipo del ricettore ha una sintassi `*T` per tipi `T`.
(In aggiunta, `T` stesso non può essere un puntatore come `*int`.)

Per esempio, il metodo `Scale` qui è definito sul tipo `*Vertex`.

Metodi con ricettori puntatori possono modificare il valore al quale puntano (come `Scale` sta facendo qui).
Dato che i metodi spesso necessitano di modificare i loro ricettori, i puntatori sono
molto più comuni che ricettori passati come valore.

Prova a rimuovere il `*` dalla dichiarazione della funzione `Scale` nella linea 16
e guarda come il programma cambia il suo comportamento.

Con un ricettore di tipo valore, il metodo `Scale` opera su una copia del valore originale `Vertex`.
(Questo è lo stesso comportamento di un qualsiasi altro argomento in una funzione.)
Il metodo `Scale` deve avere un ricettore puntatore per cambiare il valore di `Vertex` dichiarato nella funzione `main`.

.play methods/methods-pointers.go

* Puntatori e funzioni

Qui vediamo i metodi `Abs` e `Scale` riscritti come funzioni.

Ancora, prova a rimuovere il carattere `*` in linea 16.
Vedi il cambiamento?
Cos'altro hai bisogno di cambiare per compilare questo esempio?

(Se non sei sicuro, vai alla prossima pagina.)

.play methods/methods-pointers-explained.go

* Metodi e puntatori indiretti

Paragonando i due programmi precedenti, puoi notare che le funzioni
con un argomento puntatore devono usare un puntatore:

	var v Vertex
	ScaleFunc(v)  // Compile error!
	ScaleFunc(&v) // OK

mentre metodi con ricettori puntatori possono usare sia una valore che un puntatore
quando sono chiamati:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

Per l'espressione `v.Scale(5)`, anche se `v` è un valore e non un puntatore,
il metodo con il ricettore puntatore è chiamato automaticamente.
In altre parole, per convenienza, Go interpreta l'espressione `v.Scale(5)` come
`(&v).Scale(5)` in quanto il metodo `Scale` ha un ricettore puntatore.

.play methods/indirection.go

* Metodi e puntatori indiretti (2)

L'equivalente accade nella direzione inversa.

Funzioni che ricevono un argomento valore devono prendere un valore di quello specifico tipo:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Compile error!

mentre metodi con ricettori valore possono prendere sia un valore che un puntatore
come ricettore quando sono chiamati:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

In questo caso, la chiamata al metodo `p.Abs()` è interpretata come `(*p).Abs()`.

.play methods/indirection-values.go

* Scegliere tra ricettore valore o puntatore

Ci sono due ragioni per scegliere un ricettore puntatore.

Il primo è che il metodo può così modificare il valore al quale il puntatore sta puntando.

Il secondo è per evitare di copiare il valore per ogni chiamata al metodo.
Questo può essere più efficiente se il ricettore è una struttura di grandi dimensioni, per esempio.

In questo esempio, sia `Scale` che `Abs` hanno un ricettore di tipo `*Vertex`
anche se il metodo `Abs` non necessita di modificare il ricettore.

In generale, tutti i metodi su un determinato tipo dovrebbero un ricettore puntatore o valore,
ma non un mix di entrambi.
(Vedremo perchè nelle prossime pagine.)

.play methods/methods-with-pointer-receivers.go

* Interfacce

Un tipo interfaccia è definito da un insieme di metodi.

Un valore di tipo interfaccia può contenere qualsiasi valore che implementa quei metodi.

*Nota:* C'è un errore nel codice di esempio nella linea 22.
`Vertex` (il tipo valore) non soddisfa `Abser` perchè
il metodo `Abs` è definito solo su `*Vertex` (il tipo puntatore).

.play methods/interfaces.go

* Interfacce sono soddisfatte implicitamente

Un tipo implementa un'interfaccia implementandone i metodi.

Non c'è una dichiarazione esplicita; no parole chiavi "implements"

Interfacce implicite scollegano i _packages_ dell'implementazione dai _packages_ che definiscono le interfacce: l'uno non dipende dall'altro.

Questo incoraggia anche la definizione precisa di interfacce, perchè si deve trovare ogni implementazione e taggarla con il nome della nuova interfaccia.

[[http://golang.org/pkg/io/][_package_ io]] definisce `Reader` e `Writer`; non devi ridefinirle.

.play methods/interfaces-are-satisfied-implicitly.go

* Interfacce valore

Dietro le quinte, i valori interfaccia possono essere visti come tuple di un
valore e un tipo concreto:

	(value, type)

Un'interfaccia valore contiene il valore di un sottostante tipo specifico.

Chiamare un metodo su un'interfaccia valore esegue il metodo con lo stesso nome
nel suo tipo sottostante.

.play methods/interface-values.go

* Interfacce valore con sottostanti valori nil

Se il valore nell'interfaccia stessa è nil,
il metodo verrà chiamato con un ricettore nil.

In alcuni linguaggi questo provocherebbe un _null pointer exception_,
ma in Go è comune scrivere metodi che gestiscono elegantemente ricettori nil (come il metodo `M` in questo esempio.)

Nota che un valore interfaccia che contiene un valore nil è esso stesso non nil.

.play methods/interface-values-with-nil.go

* Interfacce nulle

Un valore interfaccia nil non contiene ne un valore e ne un tipo concreto.

Chiamare un metodo su un'interfaccia nulla è un errore run-time perchè non c'è
un tipo all'interno della tupla dell'interfaccia che indica quale metodo _concreto_ chiamare.

.play methods/nil-interface-values.go

* Interfacce vuote

Il tipo interfaccia che non specifica alcun metodo è conosciuto come _interfaccia vuota_:

	interface{}

Un'interfaccia vuota può contenere valori di qualsiasi tipo.
(Ogni tipo implementa almeno nessun metodo.)

Interfacce vuote sono usate da programmi che gestiscono valori di tipi indefiniti.
Per esempio, `fmt.Print` prende un numero qualsiasi di argomenti di tipo `interface{}`.

.play methods/empty-interface.go

* Dichiarazione di tipi

Una _dichiarazione di tipo_ da accesso al valore sottostante concreto di un valore interfaccia.

 	t := i.(T)

Questa espressione afferma che il valore interfaccia `i` contiene il tipo concreto `T`
e assegna il sottostante valore `T` alla variabile `t`.

Se `i` non contiene un tipo `T`, l'espressione genererà un errore fatale.

Per _testare_ se un valore interfaccia contiene un tipo specifico,
una dichiarazione di tipo può ritornare due valori: il valore sottostante
e un valore booleano che riporta se la dichiarazione ha avuto successo.

	t, ok := i.(T)

Se `i` contiene un tipo `T`, allora `t` sarà il valore sottostante e `ok` sarà vero.

Altrimenti, `ok` sarà falso e `t` sarà il valore zero del tipo `T`,
e nessun errore fatale sarà generato.

Nota la somiglianza tra questa sintassi e quella della lettura da una mappa.

.play methods/type-assertions.go

* Switch su tipi

Uno _switch su tipo_ è un costrutto che permette diversi tipi di asserzioni in serie.

Uno switch su tipo è come una normale espressione swtich, ma i casi in un tipo switch specificano tipi (non valori),
e questi valori sono comparati contro il tipo dell'interfaccia data.

	switch v := i.(type) {
	case T:
		// here v has type T
	case S:
		// here v has type S
	default:
		// no match; here v has the same type as i
	}

La dichiarazione di un tipo switch ha la stessa sintassi di una dichiarazione di tipo `i.(T)`,
ma lo specifico tipo `T` è sostituito con la keyword `type`.

Questa espressione switch controlla se il valore interfaccia `i` contiene un valore di tipo `T` o `S`.
In entrambi i casi `T` o `S`, la variabile `v` sarà rispettivamente di tipo `T` o `S` e conterrà il valore contenuto da `i`.
Nel caso di default (quando nessuno dei casi è valido), la variabile `v` è dello stesso tipo e valore di `i`.

.play methods/type-switches.go

* Stringer

Una delle interfacce più presenti è [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] definita nel _package_ [[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

Un `Stringer` è un tipo che può descrivere se stesso come una stringa. Il _package_ `fmt` (e molti altri) usano questa interfaccia per stampare valori.

.play methods/stringer.go

* Esercizio: Stringer

Fai in modo che il tipo `IPAddr` implementi `fmt.Stringer` per stampare l'indirizzo nel formato punto-decimale.

Per esempio, `IPAddr{1,`2,`3,`4}` dovrebbe stampare `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Errori

I programmi Go esprimono uno stato di errore con i valori `error`.

Il tipo `error` è un'interfaccia _built-in_ simile a `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Come per `fmt.Stringer`, il _package_ `fmt` usa l'interfaccia `error` per stampare i valori.)

Le funzioni spesso ritornano valori `error`, e il codice chiamante dovrebbe gestire gli errori testando se il valore di error è uguale a `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
	}
	fmt.Println("Converted integer:", i)

Un `error` nil denota successo; un `error` non-nil denota un fallimento.

.play methods/errors.go

* Esercizio: Errori

Copia la tua funzione `Sqrt` dagli [[/flowcontrol/8][esercizi precedenti]] e modificalo in modo che ritorni un valore `error`.

`Sqrt` dovrebbe ritornare un errore non-nil quando riceve un numero negativo, in quanto non supporta numeri complessi.

Crea un nuovo tipo

	type ErrNegativeSqrt float64

e trasformalo in `error` dandogli un metodo

	func (e ErrNegativeSqrt) Error() string

così che `ErrNegativeSqrt(-2).Error()` ritorni `"non puoi `Sqrt`un numero negativo:`-2"`.

*Nota:* una chiamata a `fmt.Sprint(e)` dentro il metodo `Error` manderà il programma in un ciclo infinito. Puoi evitarlo convertendo prima `e`: `fmt.Sprint(float64(e))`. Perchè?

Cambia la tua funzione `Sqrt` in modo da ritornare il valore `ErrNegativeSqrt` quando riceve un numero negativo.

.play methods/exercise-errors.go

* Reader

Il _package_ `io` specifica l'interfaccia `io.Reader`,
che rappresenta la lettura di uno _stream_ di dati.

La libreria standard di Go contiene [[http://golang.org/search?q=Read#Global][molte implementazioni]] di queste interfacce, includendo file, connessioni di rete, compressori, ciphers, e altre.

L'interfaccia `io.Reader` ha un metodo `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` popola il dato slice di bytes con dati e ritorna il numero di bytes popolati e un valore error. ritorna un errore `io.EOF` quando lo _stream_ termina.

Il codice di esempio crea uno
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
e allo stesso tempo consuma il suo output di 8 bytes.

.play methods/reader.go

* Esercizio: Reader

Implementa un tipo `Reader` che produce uno _stream_ infinito del carattere ASCII `'A'`.

.play methods/exercise-reader.go

* Esercizio: rot13Reader

Un pattern comune è [[http://golang.org/pkg/io/#Reader][io.Reader]] che incapsula un altro `io.Reader`, modificando lo _stream_ in alcuni modi.

Per esempio, la funzione [[http://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] prende un `io.Reader` (uno _stream_ di dati compressi) e ritorna un `*gzip.Reader`, che implementa anche lui `io.Reader` (uno _stream_ di dati non compressi).

Implementa un `rot13Reader` che implementa `io.Reader` e legge da un `io.Reader`, modificando lo _stream_ applicando la sostituzione cipher [[http://en.wikipedia.org/wiki/ROT13][rot13]] a tutti i caratteri alfabetici.

Il tipo `rot13Reader` è già fornito per te.
Trasformalo in un `io.Reader` implementandone il metodo `Read`.

.play methods/exercise-rot-reader.go

* Immagini

Il [[http://golang.org/pkg/image/#Image][_package_ image]] definisce l'interfaccia `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Nota*: il valore di ritorno `Rectangle` del metodo `Bounds` è in realtà un
[[http://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], in quanto la dichiarazione è dentro il _package_ `image`.

(Guarda [[http://golang.org/pkg/image/#Image][la documentazione]] per tutti i dettagli.)

I tipi `color.Color` e `color.Model` sono anche loro interfacce, ma lo ignoreremo per usare le implementazioni predefinite `color.RGBA` e `color.RGBAModel`. Queste interfacce e tipi sono specificati nel [[http://golang.org/pkg/image/color/][_package_ image/color]]

.play methods/images.go

* Esercizio: Immagini

Ricordi il generatore di immagine che hai scritto precedentemente? Scriviamone un altro, ma questa volta ritornerà un'implementazione di `image.Image` invece di una slice di dati.

Definisci il tuo tipo `Image`, implementa [[http://golang.org/pkg/image/#Image][i metodi necessari]], e chiama `pic.ShowImage`.

`Bounds` dovrebbe ritornare un `image.Rectangle`, come `image.Rect(0,`0,`w,`h)`.

`ColorModel` dovrebbe ritornare `color.RGBAModel`.

`At` dovrebbe ritornare un colore; il valore `v` nell'ultimo generatore di immagine corrisponde a `color.RGBA{v,`v,`255,`255}` in questo.

.play methods/exercise-images.go

* Congratulazioni

Hai terminato questa lezione!

Puoi tornare alla lista dei [[/list][moduli]] per scoprire cos'altro puoi imparare, o continua con la [[javascript:click('.next-page')][prossima lezione]].
