Altri tipi: struct, slice, e mappe
Impara come definire tipi basati su quelli già esistenti: questa lezione copre struct, array, slice, e mappe.

Gli Autori di Go
http://golang.org

* Puntatori

Go ha i puntatori.
Un puntatore contiene l'indirizzo di memoria di una variabile.

Il tipo `*T` è il puntatore a un valore di `T`. Il suo valore zero è `nil` (nullo).

	var p *int

L'operatore `&` genera un puntatore verso il suo operando.

	i := 42
	p = &i

L'operatore `*` denota il valore sottostante al puntatore.

	fmt.Println(*p) // legge i attraverso il puntatore p
	*p = 21         // imposta i attraverso il puntatore p

Questo è conosciuto come "dereferenziazione" o "indirecting".

A differenza di C, Go non ha alcuna aritmetica con i puntatori.

.play moretypes/pointers.go

* Strutture

Una `struct` è una collezione di campi.

(E una dichiarazione di un `type` fa quello che ti aspetteresti.)

.play moretypes/structs.go

* Campi in una struttura

I campi della struttura sono accessibili usando il punto

.play moretypes/struct-fields.go

* Puntatori a strutture

I campi di una struttura sono accessibili attraverso un puntatore alla struttura.

Per accedere al campo `X` di una struttura quando abbiamo un puntatore ad essa `p` potremmo
usare `(*p).X`.
Comunque, questa notazione è scomoda, per cui il linguaggio ci permette di scrivere
più semplicemente `p.X`, senza una deferenziazione esplicita.

.play moretypes/struct-pointers.go

* Strutture Letterali

Una struttura letterale denota un nuovo valore di struttura allocata listando i valori dei suoi campi.

Puoi listare solo un sottoinsieme di campi usando la sintassi `Name:`. (E l'ordine dei campi è irrilevante.)

Il prefisso speciale `&` ritorna un puntatore al valore struttura.

.play moretypes/struct-literals.go

* Array

Il tipo `[n]T` è un array di `n` valori di tipo `T`.

L'espressione

	var a [10]int

dichiara una variabile `a` come un array di dieci interi.

La lunghezza di un array è parte del suo tipo, in questo modo gli array non possono essere ridimensionati.
Questo sembra una limitazione, ma non preoccuparti;
Go offre un modo conveniente di lavorare con gli array.

.play moretypes/array.go

* Slice

Un array ha una lunghezza fissata.
Una slice, d'altro canto, è una vista flessibile,
a lunghezza dinamica degli elementi di un array.
Nella pratica, le slice sono molto più comuni degli array.

`[]T` è una slice con elementi di tipo `T`.

Questa espressione crea una slice dei primi cinque elementi dell'array `a`:

	a[0:5]

.play moretypes/slices.go

* Slice sono come referenze ad array

Una slice non memorizza nessun dato,
ma descrive soltanto una sezione di un array a lui sottostante.

Cambiare gli elementi di una slice modifica i corrispondenti elementi
dell'array sottostante.

Altre slice che condividono lo stesso array sottostante vedranno i cambiamenti.

.play moretypes/slices-pointers.go

* Slice letterali

Una slice letterale è come un array letterale, ma senza lunghezza.

Questo è un array letterale:

	[3]bool{true, true, false}

E questo crea lo stesso array come sopra,
e poi crea una slice che lo referenzia:

	[]bool{true, true, false}

.play moretypes/slice-literals.go

* Slice default

Quando si creano slice, si possono omettere i limiti inferiori e superiori e usare quelli di default.

Per il limite inferiore il default è zero, mentre per quello superiore è la lunghezza della slice.

Per l'array:

	var a [10]int

queste slice sono equivalenti:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go

* Lunghezza e capacità di una slice

Una slice ha sia una _lunghezza_ che una _capacità_.

La lunghezza di una slice è il numero di elementi che essa contiene.

La capacità di una slice è il numero di elementi nell'array sottostante,
contando dal primo elemento nella slice.

La lunghezza e la capacità di una slice `s` possono essere ottenute con le espressioni
`len(s)` and `cap(s)`.

Puoi estendere la lunghezza di una slice facendo una _re-slice_ di essa,
a condizione che ci sia sufficiente capacità.
Prova a cambiare una delle seguenti operazioni sulla slide nel programma di esempio
per estenderla più della sua capacità e guarda cosa succede.

.play moretypes/slice-len-cap.go

* Slice nulle

Il valore zero di una slice è `nil`.

Una slice _nil_ ha una lunghezza e capacità di 0 e non ha un array sottostante.

.play moretypes/nil-slices.go

* Creare una slice con make

Le slice possono essere create con la funzione `make`;
questo è il modo di creare array a lunghezza dinamica.

La funzione `make` alloca un array inizializzato a zero e
ritorna una slice che referenzia quell'array:

	a := make([]int, 5)  // len(a)=5

Per specificare una capacità, passa un terzo argomento alla funzione `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go

* Slice di slice

Una slice può contenere qualsiasi tipo, incluso altre slice.

.play moretypes/slices-of-slice.go

* Aggiungere elementi a una slice

E' comune aggiungere nuovi elementi a una slice, e per questo Go fornisce una funzione interna (_built-in_) `append`. La [[http://golang.org/pkg/builtin/#append][documentazione]]
del _package_ _built-in_ descrive `append`.

	func append(s []T, vs ...T) []T

Il primo parametro `s` di `append` è una slice di tipo `T`, e il resto sono valori `T` da aggiungere alla slice.

Il valore risultante di `append` è una slice contenente tutti gli elementi della slice originale più i valori aggiunti.

Se l'array di supporto `s` è troppo piccolo per contenere tutti i valori da aggiungere un array più grande verrà allocato. La slice ritornata punterà al nuovo array appena allocato.

(Per saperne di più sulle slice, leggi l'articolo [[http://golang.org/doc/articles/slices_usage_and_internals.html][Slices: usage and internals]]).

.play moretypes/append.go

* Range

La forma `range` del ciclo `for` itera su una slice o mappa.

Quando si itera su una slice, due valori sono ritornati ad ogni iterazione. Il primo é l'indice, e il secondo é la copia dell'elemento posizionato a quell'indice.

.play moretypes/range.go

* Range continua

Puoi tralasciare l'indice o il valore assegnandogli `_`.

Se vuoi solo l'indice, rimuovi completamente il ", value".

.play moretypes/range-continued.go

* Esercizio: Slice

Implementa `Pic`. Dovrebbe ritornare una slice di lunghezza `dy`, di cui ogni elemento è una slice di interi da 8-bit _unsigned_ `dx`. Quando esegui il programma, mostrerà la vostra immagine, interpretanto gli interi come valori di una scala di grigi (o meglio, scala di blu).

La scelta dell'immagine è libera. Funzioni interessanti includono `(x+y)/2`, `x*y`, and `x^y` (per calcolare la seconda funzione, usa use [[http://golang.org/pkg/math/#Pow][`math.Pow`]])

(Hai bisogno di un ciclo per allocare ciascun `[]uint8` dentro `[][]uint8`.)

(Usa `uint8(intValue)` per convertire tra tipi diversi.)

.play moretypes/exercise-slices.go

* Mappe

Una mappa collega chiavi a valori.

Il valore di default di una mappa é `nil`. Una mappa `nil` non ha chiavi e non posso neanche essere aggiunte.

La funzione `make` ritorna una mappa di un determinato tipo, inizializzato e pronto per l'uso.

.play moretypes/maps.go

* Mappe Letterali

Le mappe letterali sono come le strutture letterali, ma le chiavi sono obbligatorie.

.play moretypes/map-literals.go

* Mappe Letterali continua

Se il tipo di alto-livello è solo un _type_, puoi ometterlo dagli elementi del letterale.

.play moretypes/map-literals-continued.go

* Mutare le mappe

Inserire o aggiornare un elemento in una mappa `m`:

	m[key] = elem

Recuperare un elemento:

	elem = m[key]

Cancellare un elemento:

	delete(m, key)

Testare che una chiave è presente con una assegnamento a due valori:

	elem, ok = m[key]


Se `key` è in `m`, `ok` è `true`. Altrimenti, `ok` è `false` e `elem` è il valore zero dell'elemento di tipo mappa.

In modo simile, quando si legge da una mappa se la chiave non è presente il risultato è il valore zero del tipo dell'elemento della mappa.

_Nota_: se `elem` o `ok` non sono ancora state dichiarate allora puoi usare la dichiarazione corta:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Esercizio: Mappe

Implementa `WordCount`.  Dovrebbe ritornare una mappa dei contatori di ciascuna “_word_” (parola) nella stringa `s`. La funzione `wc.Test` esegue dei test sulla funzione fornita in input e stampa a video il risultato (successo o fallimento).

Potresti trovare interessante [[http://golang.org/pkg/strings/#Fields][strings.Fields]].

.play moretypes/exercise-maps.go

* Funzioni anonime

Le funzioni sono anche valori. Esse possono essere passate da una funzione all'altra come altri valori.

Funzioni anonime possono anche essere usate come argomenti in una funzione e ritornare valori.

.play moretypes/function-values.go

* Funzioni Closures

Le funzioni Go possono essere _closures_. Una _closure_ è un valore funzione che referenzia variabili al di fuori del suo corpo. La funzione può accedere e assegnare le variabili referenziate; in questo senso la funzione è "legata" alle variabili.

Per esempio, la funzione `adder` ritorna una _closure_. Ciascuna _closure_ è legata alla sua variabile `sum`.

.play moretypes/function-closures.go

* Esercizio: Fibonacci closure

Divertiamoci con le funzioni.

Implementa una funzione `fibonacci` che ritorna una funzione (una _closure_) che ritorna numeri successivi di Fibonacci.

.play moretypes/exercise-fibonacci-closure.go

* Congratulazioni!

Hai terminato questa lezione!

Puoi tornare alla lista dei [[/list][moduli]] per scoprire cos'altro puoi imparare, o continua con la [[javascript:click('.next-page')][prossima lezione]].
